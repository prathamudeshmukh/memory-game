{"version":3,"sources":["components/Row.js","Constants.js","components/MemoryPlayGround.js","App.js","serviceWorker.js","index.js"],"names":["Row","props","className","rows","i","failureMessage","tileClass","hideTiles","rowData","answersGiven","push","onClick","onTileClick","currentRow","src","id","columns","React","Component","MemoryPlayGround","memoryData","HIGHEST_SCORE_KEY","App","memorizeTime","noOfQuestionsToBeAsked","noOfWrongGuessesAllowed","scoreIncrementFactor","highestScore","localStorage","getItem","state","showTilesTimer","readComplete","guessQuestionsAlreadyAsked","progressBar","noOfWrongGuesses","currentScore","parseInt","roundInProgress","transitionDuration","_","bindAll","memoryMetaData","row","this","newRow","col","number","getRandomInt","questionsToBeAsked","getQuestionsToBeAsked","max","Math","floor","random","setState","setTimeout","startGame","transitionDurationForNextRound","getMemoryData","showTilesTimerInterval","setInterval","clearInterval","console","log","length","memoryDataIndex","index","includes","numberGuess","times","latestGuessQuestion","pop","setItem","toString","renderGuessRemaining","guessQuestion","renderScores","style","width","gotoNextRound","resetGame","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1acb7c7.chunk.js","sourcesContent":["import React from \"react\";\nimport {ANSWER_STATUS_RIGHT, ANSWER_STATUS_WRONG} from \"../Constants\";\n\nexport default class Row extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <div className={\"flex three\"}>\n            {(() => {\n                const rows = [];\n                for (let i = 0; i < this.props.columns; i++) {\n                    let failureMessage = \"hide\";\n                    let tileClass = this.props.hideTiles || !this.props.rowData[i] ? \"hide\" : \"show\";\n                    if (this.props.answersGiven[i] === ANSWER_STATUS_WRONG) {\n                        failureMessage = \"show\";\n                    }\n                    if (this.props.answersGiven[i] === ANSWER_STATUS_RIGHT) {\n                        tileClass = \"show\";\n                    }\n                    rows.push(\n                        <div onClick={() => {this.props.onTileClick(this.props.currentRow, i)}}>\n                            <div className={`tile-failure ${failureMessage}`}>\n                                <img className={\"failure-img\"} src={\"cross.svg\"}/>\n                            </div>\n                            <div className={\"tile\"} id={`tile_${this.props.currentRow}_${i}`}>\n                                <span className={`tile-text ${tileClass}`}>\n                                    {this.props.rowData[i]}\n                                </span>\n                            </div>\n                        </div>);\n                }\n                return rows;\n            })()}\n        </div>\n    }\n}\n","export const ANSWER_STATUS_WRONG = \"WRONG\";\nexport const ANSWER_STATUS_RIGHT = \"RIGHT\";\n","import React from 'react';\nimport Row from \"./Row\";\n\nexport default class MemoryPlayGround extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <div className={\"flex\"}>\n            {(() => {\n                const rows = [];\n                for (let i = 0; i < this.props.rows; i++) {\n                    rows.push(<Row\n                        rowData={this.props.memoryData[i] ? this.props.memoryData[i]: []}\n                        hideTiles={this.props.hideTiles}\n                        columns={this.props.columns}\n                        onTileClick={this.props.onTileClick}\n                        currentRow={i}\n                        answersGiven={this.props.answersGiven[i] || [] }\n                    />);\n                }\n                return rows;\n            })()}\n        </div>\n\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport '../node_modules/picnic/picnic.min.css';\nimport MemoryPlayGround from \"./components/MemoryPlayGround\";\nimport _ from \"underscore\";\nimport {ANSWER_STATUS_RIGHT, ANSWER_STATUS_WRONG} from \"./Constants\";\n\nconst HIGHEST_SCORE_KEY = \"HIGHEST_SCORE\";\n\nconst ANSWER_STATUS_NONE = \"NONE\";\n\nexport default class App extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.rows = 3;\n        this.columns = 3;\n        this.memorizeTime = 10;\n        this.noOfQuestionsToBeAsked = 3;\n        this.noOfWrongGuessesAllowed = 2;\n        this.scoreIncrementFactor = 5;\n        const highestScore = localStorage.getItem(HIGHEST_SCORE_KEY);\n        this.state = {\n            hideTiles: true,\n            showTilesTimer: this.memorizeTime,\n            memoryData: [],\n            readComplete: false,\n            guessQuestionsAlreadyAsked:[],\n            progressBar: 100,\n            noOfWrongGuesses: 0,\n            currentScore: 0,\n            highestScore: highestScore ? parseInt(highestScore) : 0,\n            answersGiven: [],\n            roundInProgress:false,\n            transitionDuration: this.memorizeTime\n        };\n        _.bindAll(this, \"startGame\", \"onTileClick\", \"resetGame\",\"gotoNextRound\");\n    }\n\n    getMemoryData() {\n        let memoryData = [];\n        const memoryMetaData = [];\n        const answersGiven = [];\n        for (let row=0; row<this.rows; row++) {\n            const newRow = [];\n            answersGiven[row] = [];\n            for (let col=0; col<this.columns; col++) {\n                const number = this.getRandomInt(99);\n                newRow.push(number);\n                memoryMetaData.push(number);\n                answersGiven[row].push(ANSWER_STATUS_NONE);\n            }\n            memoryData.push(newRow);\n        }\n        const questionsToBeAsked = this.getQuestionsToBeAsked(memoryMetaData);\n        return {memoryData, memoryMetaData, questionsToBeAsked, answersGiven};\n    }\n\n    getRandomInt(max) {\n        return Math.floor(Math.random() * Math.floor(max));\n    }\n\n    resetGame() {\n        this.setState({\n            questionsToBeAsked: [],\n            answersGiven: [],\n            memoryMetaData: [],\n            memoryData: [],\n            currentScore: 0,\n            progressBar: 100,\n            hideTiles: true,\n            readComplete: false,\n            showTilesTimer: this.memorizeTime,\n            noOfWrongGuesses: 0,\n            roundInProgress: false,\n            transitionDuration: this.memorizeTime\n        })\n    }\n\n    gotoNextRound(){\n        const transitionDurationForNextRound = 1;\n        this.setState({\n            questionsToBeAsked: [],\n            answersGiven: [],\n            memoryMetaData: [],\n            memoryData: [],\n            progressBar: 100,\n            hideTiles: true,\n            readComplete: false,\n            showTilesTimer: this.memorizeTime,\n            noOfWrongGuesses: 0,\n            roundInProgress: false,\n            transitionDuration: transitionDurationForNextRound\n        });\n       setTimeout(this.startGame, transitionDurationForNextRound * 1000);\n    }\n\n    startGame() {\n        if (this.state.roundInProgress) return;\n        const { memoryData, memoryMetaData, questionsToBeAsked, answersGiven} = this.getMemoryData();\n        this.setState( {\n            hideTiles: false,\n            memoryData,\n            memoryMetaData,\n            questionsToBeAsked,\n            answersGiven,\n            transitionDuration: this.memorizeTime,\n            progressBar: 0,\n            roundInProgress: true\n        } );\n        this.showTilesTimerInterval = setInterval(() => {\n            this.setState( {\n                showTilesTimer: this.state.showTilesTimer - 1\n            } )\n        }, 1000);\n\n        setTimeout(() => {\n            this.setState({hideTiles: true, showTilesTimer: this.memorizeTime, readComplete: true });\n            clearInterval(this.showTilesTimerInterval);\n        }, this.memorizeTime * 1000)\n    }\n\n    guessQuestion(){\n        if(this.state.readComplete){\n            console.log(\"MemoryData\", this.state.memoryData);\n            const {questionsToBeAsked, memoryMetaData} = this.state;\n            if (questionsToBeAsked.length === 0) {\n                return 'Round over';\n            }\n            const memoryDataIndex = questionsToBeAsked[questionsToBeAsked.length - 1];\n            return `Guess where was ${memoryMetaData[memoryDataIndex]}`\n        }\n    }\n\n    numberGuess(questionsToBeAsked,memoryMetaData){\n        const max = memoryMetaData.length;\n        const index = this.getRandomInt(max);\n        if (questionsToBeAsked.includes(index)) {\n            return this.numberGuess(questionsToBeAsked,memoryMetaData);\n        }\n        return index;\n    }\n\n    getQuestionsToBeAsked(memoryMetaData) {\n        const questionsToBeAsked = [];\n        _.times(this.noOfQuestionsToBeAsked, ()=>{\n            questionsToBeAsked.push(this.numberGuess(questionsToBeAsked, memoryMetaData));\n        });\n        return questionsToBeAsked;\n    }\n\n    onTileClick(row, col) {\n        if (!this.state.roundInProgress) return;\n        const { questionsToBeAsked, memoryData, memoryMetaData, answersGiven} = this.state;\n        const latestGuessQuestion = questionsToBeAsked[questionsToBeAsked.length - 1];\n        if (memoryData[row][col] === memoryMetaData[latestGuessQuestion]) {\n            questionsToBeAsked.pop();\n            const currentScore = this.state.currentScore + this.scoreIncrementFactor;\n            let highestScore = this.state.highestScore;\n            if (currentScore > this.state.highestScore) {\n                highestScore = currentScore;\n                localStorage.setItem(HIGHEST_SCORE_KEY, highestScore.toString())\n            }\n            answersGiven[row][col] = ANSWER_STATUS_RIGHT;\n            this.setState( { questionsToBeAsked, currentScore, highestScore, answersGiven } );\n            return;\n        }\n        answersGiven[row][col] = ANSWER_STATUS_WRONG;\n        if (this.state.noOfWrongGuesses < this.noOfWrongGuessesAllowed) {\n            this.setState({ noOfWrongGuesses: this.state.noOfWrongGuesses + 1, answersGiven });\n            return;\n        }\n        this.setState({answersGiven, roundInProgress: false})\n    }\n\n    renderGuessRemaining() {\n        return <div>\n            No Of Guesses remained:\n            <span className=\"guess-no\">\n                {this.noOfWrongGuessesAllowed - this.state.noOfWrongGuesses}\n            </span>\n        </div>\n    }\n\n    renderScores() {\n        return <div>\n            <div>\n                Current Score:\n                <span className=\"current-score\">\n                    {this.state.currentScore}\n                </span>\n            </div>\n            <div>\n                Your Highest Score:\n                <span className=\"highest-score\">\n                    {this.state.highestScore}\n                </span>\n            </div>\n        </div>\n    }\n\n    render() {\n        return <div className=\"App\">\n            <nav><span className={\"brand\"}>Memory Game</span></nav>\n            <MemoryPlayGround\n                memoryData={this.state.memoryData}\n                rows={this.rows}\n                columns={this.columns}\n                hideTiles={this.state.hideTiles}\n                onTileClick={this.onTileClick}\n                answersGiven={this.state.answersGiven}\n            />\n            <div>{this.renderGuessRemaining()}</div>\n            <div>{this.guessQuestion()}</div>\n            <div>{this.renderScores()}</div>\n            <div className=\"status-bar-border\">\n                <div className=\"status-bar-fill\" style={{\n                    width: `${this.state.progressBar}%`,\n                    transitionDuration: `${this.state.transitionDuration}s`\n                }} >\n                    {this.state.showTilesTimer ? this.state.showTilesTimer : \"\"}\n                </div>\n            </div>\n            <button onClick={this.startGame}>Start!</button>\n            {(()=>{\n                if(this.state.roundInProgress && this.state.questionsToBeAsked.length === 0) {\n                    return <button onClick={this.gotoNextRound}>Next Round</button>\n                }\n            })()}\n            <button onClick={this.resetGame}>Reset</button>\n        </div>\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}