{"version":3,"sources":["components/Row.js","components/MemoryPlayGround.js","App.js","serviceWorker.js","index.js"],"names":["Row","props","className","rows","i","push","onClick","onTileClick","currentRow","src","id","hideTiles","rowData","columns","React","Component","MemoryPlayGround","memoryData","HIGHEST_SCORE_KEY","App","memorizeTime","noOfQuestionsToBeAsked","noOfWrongGuessesAllowed","scoreIncrementFactor","highestScore","localStorage","getItem","state","showTilesTimer","readComplete","guessQuestionsAlreadyAsked","progressBar","noOfWrongGuesses","currentScore","parseInt","_","bindAll","memoryMetaData","row","this","newRow","col","number","getRandomInt","console","info","questionsToBeAsked","getQuestionsToBeAsked","max","Math","floor","random","getMemoryData","setState","showTilesTimerInterval","setInterval","setTimeout","clearInterval","log","length","memoryDataIndex","index","includes","numberGuess","times","latestGuessQuestion","pop","setItem","toString","renderGuessRemaining","guessQuestion","renderScores","style","width","transitionDuration","startGame","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9922d136.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Row extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <div className={\"flex three\"}>\n            {(() => {\n                const rows = [];\n                for (let i = 0; i < this.props.columns; i++) {\n                    rows.push(<div onClick={() => {this.props.onTileClick(this.props.currentRow, i)}}>\n                        <div className={\"tile-failure\"}>\n                            <img className={\"failure-img\"} src={\"cross.svg\"}/>\n                        </div>\n                        <div className={\"tile\"} id={`tile_${this.props.currentRow}_${i}`}>\n                            {this.props.hideTiles || !this.props.rowData[i]? \"\" : this.props.rowData[i]}\n                            <span className={\"tile-text\"}>45</span>\n                        </div>\n                    </div>);\n                }\n                return rows;\n            })()}\n        </div>\n    }\n}\n","import React from 'react';\nimport Row from \"./Row\";\n\nexport default class MemoryPlayGround extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <div className={\"flex\"}>\n            {(() => {\n                const rows = [];\n                for (let i = 0; i < this.props.rows; i++) {\n                    rows.push(<Row\n                        rowData={this.props.memoryData[i] ? this.props.memoryData[i]: []}\n                        hideTiles={this.props.hideTiles}\n                        columns={this.props.columns}\n                        onTileClick={this.props.onTileClick}\n                        currentRow={i}\n                    />);\n                }\n                return rows;\n            })()}\n        </div>\n\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport '../node_modules/picnic/picnic.min.css';\nimport MemoryPlayGround from \"./components/MemoryPlayGround\";\nimport _ from \"underscore\";\n\nconst HIGHEST_SCORE_KEY = \"HIGHEST_SCORE\";\n\nexport default class App extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.rows = 3;\n        this.columns = 3;\n        this.memorizeTime = 10;\n        this.noOfQuestionsToBeAsked = 3;\n        this.noOfWrongGuessesAllowed = 2;\n        this.scoreIncrementFactor = 5;\n        const highestScore = localStorage.getItem(HIGHEST_SCORE_KEY);\n        this.state = {\n            hideTiles: true,\n            showTilesTimer: this.memorizeTime,\n            memoryData: [],\n            readComplete: false,\n            guessQuestionsAlreadyAsked:[],\n            progressBar: 100,\n            noOfWrongGuesses: 0,\n            currentScore: 0,\n            highestScore: highestScore ? parseInt(highestScore) : 0,\n        };\n        _.bindAll(this, \"startGame\", \"onTileClick\")\n    }\n\n    getMemoryData() {\n        let memoryData = [];\n        const memoryMetaData = [];\n        for (let row=0; row<this.rows; row++) {\n            const newRow = [];\n            for (let col=0; col<this.columns; col++) {\n                const number = this.getRandomInt(99);\n                newRow.push(number);\n                memoryMetaData.push(number);\n            }\n            memoryData.push(newRow);\n        }\n        console.info('memoryData',memoryData);\n        const questionsToBeAsked = this.getQuestionsToBeAsked(memoryMetaData);\n        return {memoryData, memoryMetaData, questionsToBeAsked};\n    }\n\n    getRandomInt(max) {\n        return Math.floor(Math.random() * Math.floor(max));\n    }\n\n    startGame() {\n        const { memoryData, memoryMetaData, questionsToBeAsked} = this.getMemoryData();\n        this.setState( { hideTiles: false, memoryData, memoryMetaData, questionsToBeAsked, progressBar: 0 } );\n        this.showTilesTimerInterval = setInterval(() => {\n            this.setState( {\n                showTilesTimer: this.state.showTilesTimer - 1\n            } )\n        }, 1000);\n\n        setTimeout(() => {\n            this.setState({hideTiles: true, showTilesTimer: this.memorizeTime, readComplete: true });\n            clearInterval(this.showTilesTimerInterval);\n        }, this.memorizeTime * 1000)\n    }\n\n    guessQuestion(){\n        if(this.state.readComplete){\n            console.log(\"MemoryData\", this.state.memoryData);\n            console.log(\"questionsToBeAsked\", this.state.questionsToBeAsked);\n            console.log(\"memoryMetaData\", this.state.memoryMetaData);\n\n            const {questionsToBeAsked, memoryMetaData} = this.state;\n            if (questionsToBeAsked.length === 0) {\n                return 'Round over';\n            }\n            const memoryDataIndex = questionsToBeAsked[questionsToBeAsked.length - 1];\n            return `Guess where was ${memoryMetaData[memoryDataIndex]}`\n        }\n    }\n\n    numberGuess(questionsToBeAsked,memoryMetaData){\n        const max = memoryMetaData.length;\n        const index = this.getRandomInt(max);\n        if (questionsToBeAsked.includes(index)) {\n            return this.numberGuess(questionsToBeAsked,memoryMetaData);\n        }\n        return index;\n    }\n\n    getQuestionsToBeAsked(memoryMetaData) {\n        const questionsToBeAsked = [];\n        _.times(this.noOfQuestionsToBeAsked, ()=>{\n            questionsToBeAsked.push(this.numberGuess(questionsToBeAsked, memoryMetaData));\n        });\n        return questionsToBeAsked;\n    }\n\n    onTileClick(row, col) {\n        const { questionsToBeAsked, memoryData, memoryMetaData} = this.state;\n        const latestGuessQuestion = questionsToBeAsked[questionsToBeAsked.length - 1];\n        console.log('clicked on:'+ memoryData[row][col]);\n        console.log('Expected :'+ memoryMetaData[latestGuessQuestion]);\n        if (memoryData[row][col] === memoryMetaData[latestGuessQuestion]) {\n            // alert(\"success\");\n            questionsToBeAsked.pop();\n            const currentScore = this.state.currentScore + this.scoreIncrementFactor;\n            let highestScore = this.state.highestScore;\n            if (currentScore > this.state.highestScore) {\n                highestScore = currentScore;\n                localStorage.setItem(HIGHEST_SCORE_KEY, highestScore.toString())\n            }\n            this.setState( { questionsToBeAsked, currentScore, highestScore } );\n            return;\n        }\n        console.info(\"wrong guesses:\",this.state.noOfWrongGuesses,this.noOfWrongGuessesAllowed);\n        if (this.state.noOfWrongGuesses < this.noOfWrongGuessesAllowed) {\n            // alert(\"failure\");\n            this.setState({noOfWrongGuesses: this.state.noOfWrongGuesses + 1});\n            return;\n        }\n        // alert(\"GAME OVER\");\n    }\n\n    renderGuessRemaining() {\n        return <div>\n            No Of Guesses remained:\n            <span className=\"guess-no\">\n                {this.noOfWrongGuessesAllowed - this.state.noOfWrongGuesses}\n            </span>\n        </div>\n    }\n\n    renderScores() {\n        return <div>\n            <div>\n                Current Score:\n                <span className=\"current-score\">\n                    {this.state.currentScore}\n                </span>\n            </div>\n            <div>\n                Your Highest Score:\n                <span className=\"highest-score\">\n                    {this.state.highestScore}\n                </span>\n            </div>\n        </div>\n    }\n\n    render() {\n        return <div className=\"App\">\n            <MemoryPlayGround\n                memoryData={this.state.memoryData}\n                rows={this.rows}\n                columns={this.columns}\n                hideTiles={this.state.hideTiles}\n                onTileClick={this.onTileClick}\n            />\n            <div>{this.renderGuessRemaining()}</div>\n            <div>{this.guessQuestion()}</div>\n            <div>{this.renderScores()}</div>\n            <div className=\"status-bar-border\">\n                <div className=\"status-bar-fill\" style={{\n                    width: `${this.state.progressBar}%`,\n                    transitionDuration: `${this.memorizeTime}s`\n                }} >\n                    {this.state.showTilesTimer ? this.state.showTilesTimer : \"\"}\n                </div>\n            </div>\n            <button onClick={this.startGame}>Start!</button>\n        </div>\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}