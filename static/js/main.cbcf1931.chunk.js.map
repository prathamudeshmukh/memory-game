{"version":3,"sources":["components/Row.js","Constants.js","components/MemoryPlayGround.js","App.js","serviceWorker.js","index.js"],"names":["Row","props","className","rows","console","log","rowData","i","failureMessage","tileClass","hideTiles","answersGiven","push","onClick","onTileClick","currentRow","src","id","columns","React","Component","MemoryPlayGround","memoryData","HIGHEST_SCORE_KEY","App","memorizeTime","noOfQuestionsToBeAsked","noOfWrongGuessesAllowed","scoreIncrementFactor","highestScore","localStorage","getItem","state","showTilesTimer","readComplete","guessQuestionsAlreadyAsked","progressBar","noOfWrongGuesses","currentScore","parseInt","_","bindAll","memoryMetaData","row","this","newRow","col","number","getRandomInt","info","questionsToBeAsked","getQuestionsToBeAsked","max","Math","floor","random","setState","getMemoryData","showTilesTimerInterval","setInterval","setTimeout","clearInterval","length","memoryDataIndex","index","includes","numberGuess","times","latestGuessQuestion","pop","setItem","toString","renderGuessRemaining","guessQuestion","renderScores","style","width","transitionDuration","startGame","resetGame","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbcf1931.chunk.js","sourcesContent":["import React from \"react\";\nimport {ANSWER_STATUS_RIGHT, ANSWER_STATUS_WRONG} from \"../Constants\";\n\nexport default class Row extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <div className={\"flex three\"}>\n            {(() => {\n                const rows = [];\n                console.log('this.props.rowData',this.props.rowData)\n                for (let i = 0; i < this.props.columns; i++) {\n                    let failureMessage = \"hide\";\n                    let tileClass = this.props.hideTiles || !this.props.rowData[i] ? \"hide\" : \"show\";\n                    if (this.props.answersGiven[i] === ANSWER_STATUS_WRONG) {\n                        failureMessage = \"show\";\n                    }\n                    if (this.props.answersGiven[i] === ANSWER_STATUS_RIGHT) {\n                        tileClass = \"show\";\n                    }\n                    rows.push(\n                        <div onClick={() => {this.props.onTileClick(this.props.currentRow, i)}}>\n                            <div className={`tile-failure ${failureMessage}`}>\n                                <img className={\"failure-img\"} src={\"cross.svg\"}/>\n                            </div>\n                            <div className={\"tile\"} id={`tile_${this.props.currentRow}_${i}`}>\n                                <span className={`tile-text ${tileClass}`}>\n                                    {this.props.rowData[i]}\n                                </span>\n                            </div>\n                        </div>);\n                }\n                return rows;\n            })()}\n        </div>\n    }\n}\n","export const ANSWER_STATUS_WRONG = \"WRONG\";\nexport const ANSWER_STATUS_RIGHT = \"RIGHT\";\n","import React from 'react';\nimport Row from \"./Row\";\n\nexport default class MemoryPlayGround extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <div className={\"flex\"}>\n            {(() => {\n                const rows = [];\n                for (let i = 0; i < this.props.rows; i++) {\n                    rows.push(<Row\n                        rowData={this.props.memoryData[i] ? this.props.memoryData[i]: []}\n                        hideTiles={this.props.hideTiles}\n                        columns={this.props.columns}\n                        onTileClick={this.props.onTileClick}\n                        currentRow={i}\n                        answersGiven={this.props.answersGiven[i] || [] }\n                    />);\n                }\n                return rows;\n            })()}\n        </div>\n\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport '../node_modules/picnic/picnic.min.css';\nimport MemoryPlayGround from \"./components/MemoryPlayGround\";\nimport _ from \"underscore\";\nimport {ANSWER_STATUS_RIGHT, ANSWER_STATUS_WRONG} from \"./Constants\";\n\nconst HIGHEST_SCORE_KEY = \"HIGHEST_SCORE\";\n\nconst ANSWER_STATUS_NONE = \"NONE\";\n\nexport default class App extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.rows = 3;\n        this.columns = 3;\n        this.memorizeTime = 10;\n        this.noOfQuestionsToBeAsked = 3;\n        this.noOfWrongGuessesAllowed = 2;\n        this.scoreIncrementFactor = 5;\n        const highestScore = localStorage.getItem(HIGHEST_SCORE_KEY);\n        this.state = {\n            hideTiles: true,\n            showTilesTimer: this.memorizeTime,\n            memoryData: [],\n            readComplete: false,\n            guessQuestionsAlreadyAsked:[],\n            progressBar: 100,\n            noOfWrongGuesses: 0,\n            currentScore: 0,\n            highestScore: highestScore ? parseInt(highestScore) : 0,\n            answersGiven: [],\n        };\n        _.bindAll(this, \"startGame\", \"onTileClick\", \"resetGame\")\n    }\n\n    getMemoryData() {\n        let memoryData = [];\n        const memoryMetaData = [];\n        const answersGiven = [];\n        for (let row=0; row<this.rows; row++) {\n            const newRow = [];\n            answersGiven[row] = [];\n            for (let col=0; col<this.columns; col++) {\n                const number = this.getRandomInt(99);\n                newRow.push(number);\n                memoryMetaData.push(number);\n                answersGiven[row].push(ANSWER_STATUS_NONE);\n            }\n            memoryData.push(newRow);\n        }\n        console.info('memoryData',memoryData);\n        const questionsToBeAsked = this.getQuestionsToBeAsked(memoryMetaData);\n        return {memoryData, memoryMetaData, questionsToBeAsked, answersGiven};\n    }\n\n    getRandomInt(max) {\n        return Math.floor(Math.random() * Math.floor(max));\n    }\n\n    resetGame() {\n        this.setState({\n            questionsToBeAsked: [],\n            answersGiven: [],\n            memoryMetaData: [],\n            memoryData: [],\n            currentScore: 0,\n            progressBar: 100,\n            hideTiles: true,\n            readComplete: false,\n            showTilesTimer: this.memorizeTime,\n            noOfWrongGuesses: 0\n        })\n    }\n\n    startGame() {\n        const { memoryData, memoryMetaData, questionsToBeAsked, answersGiven} = this.getMemoryData();\n        this.setState( { hideTiles: false, memoryData, memoryMetaData, questionsToBeAsked, answersGiven, progressBar: 0 } );\n        this.showTilesTimerInterval = setInterval(() => {\n            this.setState( {\n                showTilesTimer: this.state.showTilesTimer - 1\n            } )\n        }, 1000);\n\n        setTimeout(() => {\n            this.setState({hideTiles: true, showTilesTimer: this.memorizeTime, readComplete: true });\n            clearInterval(this.showTilesTimerInterval);\n        }, this.memorizeTime * 1000)\n    }\n\n    guessQuestion(){\n        if(this.state.readComplete){\n            console.log(\"MemoryData\", this.state.memoryData);\n            console.log(\"questionsToBeAsked\", this.state.questionsToBeAsked);\n            console.log(\"memoryMetaData\", this.state.memoryMetaData);\n\n            const {questionsToBeAsked, memoryMetaData} = this.state;\n            if (questionsToBeAsked.length === 0) {\n                return 'Round over';\n            }\n            const memoryDataIndex = questionsToBeAsked[questionsToBeAsked.length - 1];\n            return `Guess where was ${memoryMetaData[memoryDataIndex]}`\n        }\n    }\n\n    numberGuess(questionsToBeAsked,memoryMetaData){\n        const max = memoryMetaData.length;\n        const index = this.getRandomInt(max);\n        if (questionsToBeAsked.includes(index)) {\n            return this.numberGuess(questionsToBeAsked,memoryMetaData);\n        }\n        return index;\n    }\n\n    getQuestionsToBeAsked(memoryMetaData) {\n        const questionsToBeAsked = [];\n        _.times(this.noOfQuestionsToBeAsked, ()=>{\n            questionsToBeAsked.push(this.numberGuess(questionsToBeAsked, memoryMetaData));\n        });\n        return questionsToBeAsked;\n    }\n\n    onTileClick(row, col) {\n        const { questionsToBeAsked, memoryData, memoryMetaData, answersGiven} = this.state;\n        const latestGuessQuestion = questionsToBeAsked[questionsToBeAsked.length - 1];\n        console.log('clicked on:'+ memoryData[row][col]);\n        console.log('Expected :'+ memoryMetaData[latestGuessQuestion]);\n        if (memoryData[row][col] === memoryMetaData[latestGuessQuestion]) {\n            // alert(\"success\");\n            questionsToBeAsked.pop();\n            const currentScore = this.state.currentScore + this.scoreIncrementFactor;\n            let highestScore = this.state.highestScore;\n            if (currentScore > this.state.highestScore) {\n                highestScore = currentScore;\n                localStorage.setItem(HIGHEST_SCORE_KEY, highestScore.toString())\n            }\n            answersGiven[row][col] = ANSWER_STATUS_RIGHT;\n            this.setState( { questionsToBeAsked, currentScore, highestScore, answersGiven } );\n            return;\n        }\n        console.info(\"wrong guesses:\",this.state.noOfWrongGuesses,this.noOfWrongGuessesAllowed);\n        answersGiven[row][col] = ANSWER_STATUS_WRONG;\n        if (this.state.noOfWrongGuesses < this.noOfWrongGuessesAllowed) {\n            // alert(\"failure\");\n            this.setState({ noOfWrongGuesses: this.state.noOfWrongGuesses + 1, answersGiven });\n            return;\n        }\n        // alert(\"GAME OVER\");\n        this.setState({answersGiven})\n    }\n\n    renderGuessRemaining() {\n        return <div>\n            No Of Guesses remained:\n            <span className=\"guess-no\">\n                {this.noOfWrongGuessesAllowed - this.state.noOfWrongGuesses}\n            </span>\n        </div>\n    }\n\n    renderScores() {\n        return <div>\n            <div>\n                Current Score:\n                <span className=\"current-score\">\n                    {this.state.currentScore}\n                </span>\n            </div>\n            <div>\n                Your Highest Score:\n                <span className=\"highest-score\">\n                    {this.state.highestScore}\n                </span>\n            </div>\n        </div>\n    }\n\n    render() {\n        return <div className=\"App\">\n            <nav><span className={\"brand\"}>Memory Game</span></nav>\n            <MemoryPlayGround\n                memoryData={this.state.memoryData}\n                rows={this.rows}\n                columns={this.columns}\n                hideTiles={this.state.hideTiles}\n                onTileClick={this.onTileClick}\n                answersGiven={this.state.answersGiven}\n            />\n            <div>{this.renderGuessRemaining()}</div>\n            <div>{this.guessQuestion()}</div>\n            <div>{this.renderScores()}</div>\n            <div className=\"status-bar-border\">\n                <div className=\"status-bar-fill\" style={{\n                    width: `${this.state.progressBar}%`,\n                    transitionDuration: `${this.memorizeTime}s`\n                }} >\n                    {this.state.showTilesTimer ? this.state.showTilesTimer : \"\"}\n                </div>\n            </div>\n            <button onClick={this.startGame}>Start!</button>\n            <button onClick={this.resetGame}>Reset</button>\n        </div>\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}